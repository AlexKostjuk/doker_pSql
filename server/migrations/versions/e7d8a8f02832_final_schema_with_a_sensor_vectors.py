"""final schema with a_sensor_vectors

Revision ID: e7d8a8f02832
Revises: 
Create Date: 2025-10-22 14:18:17.472860

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e7d8a8f02832'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ml_models',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('model_name', sa.String(length=100), nullable=False),
    sa.Column('model_version', sa.String(length=20), nullable=False),
    sa.Column('model_type', sa.String(length=50), nullable=False),
    sa.Column('model_format', sa.String(length=20), nullable=True),
    sa.Column('model_size_bytes', sa.BigInteger(), nullable=True),
    sa.Column('checksum', sa.String(length=64), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('model_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('user_type', sa.String(length=20), nullable=True),
    sa.Column('subscription_end', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('devices',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('device_name', sa.String(length=100), nullable=False),
    sa.Column('device_type', sa.String(length=20), nullable=True),
    sa.Column('device_id', sa.String(length=100), nullable=False),
    sa.Column('os_version', sa.String(length=50), nullable=True),
    sa.Column('app_version', sa.String(length=20), nullable=True),
    sa.Column('last_seen', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('device_id')
    )
    op.create_table('training_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('session_type', sa.String(length=20), nullable=True),
    sa.Column('model_version_before', sa.String(length=20), nullable=True),
    sa.Column('model_version_after', sa.String(length=20), nullable=True),
    sa.Column('samples_used', sa.Integer(), nullable=False),
    sa.Column('epochs', sa.Integer(), nullable=False),
    sa.Column('learning_rate', sa.Float(), nullable=True),
    sa.Column('validation_loss', sa.Float(), nullable=True),
    sa.Column('validation_accuracy', sa.Float(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('training_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('error_message', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('a_sensor_vectors',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('device_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('heart_rate', sa.Integer(), nullable=True),
    sa.Column('hrv_rmssd', sa.Float(), nullable=True),
    sa.Column('hrv_sdnn', sa.Float(), nullable=True),
    sa.Column('spo2', sa.Integer(), nullable=True),
    sa.Column('skin_temperature', sa.Float(), nullable=True),
    sa.Column('accel_x', sa.Float(), nullable=True),
    sa.Column('accel_y', sa.Float(), nullable=True),
    sa.Column('accel_z', sa.Float(), nullable=True),
    sa.Column('gyro_x', sa.Float(), nullable=True),
    sa.Column('gyro_y', sa.Float(), nullable=True),
    sa.Column('gyro_z', sa.Float(), nullable=True),
    sa.Column('steps_count', sa.Integer(), nullable=True),
    sa.Column('noise_level_db', sa.Float(), nullable=True),
    sa.Column('breathing_rate', sa.Integer(), nullable=True),
    sa.Column('activity_type', sa.Text(), nullable=True),
    sa.Column('location_type', sa.Text(), nullable=True),
    sa.Column('battery_level', sa.Integer(), nullable=True),
    sa.Column('stress_level', sa.Float(), nullable=True),
    sa.Column('energy_level', sa.Float(), nullable=True),
    sa.Column('focus_level', sa.Float(), nullable=True),
    sa.Column('model_version', sa.Text(), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('raw_features', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('lora_weights', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('signal_quality', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id', 'timestamp', 'user_id')
    )
    op.create_index(op.f('ix_a_sensor_vectors_device_id'), 'a_sensor_vectors', ['device_id'], unique=False)
    op.create_index(op.f('ix_a_sensor_vectors_timestamp'), 'a_sensor_vectors', ['timestamp'], unique=False)
    op.create_index(op.f('ix_a_sensor_vectors_user_id'), 'a_sensor_vectors', ['user_id'], unique=False)
    op.create_index('ix_sensor_vectors_user_timestamp', 'a_sensor_vectors', ['user_id', 'timestamp'], unique=False)
    op.create_table('lora_updates',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('device_id', sa.Integer(), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=True),
    sa.Column('lora_weights', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('update_timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('training_samples', sa.Integer(), nullable=False),
    sa.Column('validation_accuracy', sa.Float(), nullable=True),
    sa.Column('update_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ),
    sa.ForeignKeyConstraint(['model_id'], ['ml_models.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('lora_updates')
    op.drop_index('ix_sensor_vectors_user_timestamp', table_name='a_sensor_vectors')
    op.drop_index(op.f('ix_a_sensor_vectors_user_id'), table_name='a_sensor_vectors')
    op.drop_index(op.f('ix_a_sensor_vectors_timestamp'), table_name='a_sensor_vectors')
    op.drop_index(op.f('ix_a_sensor_vectors_device_id'), table_name='a_sensor_vectors')
    op.drop_table('a_sensor_vectors')
    op.drop_table('training_sessions')
    op.drop_table('devices')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('ml_models')
    # ### end Alembic commands ###
